//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_MyPeerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.MyPeer), typeof(Manager));
		L.RegFunction("Connected", Connected);
		L.RegFunction("SendMsg", SendMsg);
		L.RegFunction("GetMsg", GetMsg);
		L.RegFunction("HadConnected", HadConnected);
		L.RegFunction("HadDisConnected", HadDisConnected);
		L.RegFunction("CallMethod", CallMethod);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("_instance", get__instance, set__instance);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			LuaFramework.MyPeer.Connected(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 2);
			LuaFramework.MyPeer.SendMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaFramework.MyPeer obj = (LuaFramework.MyPeer)ToLua.CheckObject<LuaFramework.MyPeer>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.Dictionary<byte,object> arg1 = (System.Collections.Generic.Dictionary<byte,object>)ToLua.CheckObject(L, 3, typeof(System.Collections.Generic.Dictionary<byte,object>));
			obj.GetMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HadConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.MyPeer obj = (LuaFramework.MyPeer)ToLua.CheckObject<LuaFramework.MyPeer>(L, 1);
			obj.HadConnected();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HadDisConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.MyPeer obj = (LuaFramework.MyPeer)ToLua.CheckObject<LuaFramework.MyPeer>(L, 1);
			obj.HadDisConnected();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallMethod(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFramework.MyPeer obj = (LuaFramework.MyPeer)ToLua.CheckObject<LuaFramework.MyPeer>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			object[] o = obj.CallMethod(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, LuaFramework.MyPeer._instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__instance(IntPtr L)
	{
		try
		{
			LuaFramework.MyPeer arg0 = (LuaFramework.MyPeer)ToLua.CheckObject<LuaFramework.MyPeer>(L, 2);
			LuaFramework.MyPeer._instance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

